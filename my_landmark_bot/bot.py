import os
import logging
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from config import BOT_TOKEN

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ
logging.basicConfig(level=logging.INFO)
os.makedirs("photos", exist_ok=True)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
landmarks = {
    "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": "kinoteatr_simf",
    "–ü–∞–º—è—Ç–Ω–∏–∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–µ II": "ekaterina_2",
    "–ü–∞–º—è—Ç–Ω–∏–∫ –ê–º–µ—Ç-–•–∞–Ω—É –°—É–ª—Ç–∞–Ω—É": "pamatnik_amet_han_sultan",
    "–°–∫–≤–µ—Ä –∏–º–µ–Ω–∏ –¢—Ä–µ–Ω—ë–≤–∞": "scver_trenev",
    "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ-–ù–µ–≤—Å–∫–∏–π —Å–æ–±–æ—Ä": "sobor_alex_nevs",
    "–î–æ–ª–≥–æ—Ä—É–∫–æ–≤—Å–∫–∏–π –æ–±–µ–ª–∏—Å–∫": "dolgoruk_obelisk",
    "–î–æ–º –í–æ—Ä–æ–Ω—Ü–æ–≤–∞": "dom_voronsova",
    "–ö–µ–Ω–∞—Å—Å–∞ –≤ –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª–µ": "kenassa_simf",
    "–ö–µ–±–∏—Ä-–î–∂–∞–º–∏": "mechet_kebir_dzhami"
}

def get_landmarks_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton(name)] for name in landmarks], resize_keyboard=True)

start_keyboard = ReplyKeyboardMarkup([[KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç")]], resize_keyboard=True, one_time_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["started"] = True
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=start_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("started"):
        await update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start")
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_landmarks_keyboard())

# –í—ã–±–æ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async def handle_landmark_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("started"):
        await update.message.reply_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return

    text = update.message.text
    if text in landmarks:
        context.user_data["selected_landmark"] = landmarks[text]
        await update.message.reply_text(
            f"–¢—ã –≤—ã–±—Ä–∞–ª: {text}. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —ç—Ç–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_landmarks_keyboard())

# –§–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("started"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start")
        return

    target = context.user_data.get("selected_landmark")
    if not target:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
        return

    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"photos/{photo_file.file_id}.jpg"
    await photo_file.download_to_drive(photo_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∫–æ–¥ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ Flask-—Å–µ—Ä–≤–µ—Ä
    async with aiohttp.ClientSession() as session:
        with open(photo_path, "rb") as f:
            data = aiohttp.FormData()
            data.add_field("image", f, filename="photo.jpg", content_type="image/jpeg")
            try:
                async with session.post(f"http://localhost:8005/verify?target={target}", data=data) as resp:
                    if resp.status == 200:
                        response = await resp.json()
                        result = response.get("result", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                        await update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    elif resp.status == 400:
                        await update.message.reply_text("üö´ –ù–µ —Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
                    else:
                        error = await resp.json()
                        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

            except Exception as e:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")

    os.remove(photo_path)
    context.user_data.pop("selected_landmark", None)
    await update.message.reply_text("–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=get_landmarks_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
async def handle_unknown_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("started"):
        await update.message.reply_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start")
        return

    if context.user_data.get("selected_landmark"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_landmarks_keyboard())

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^üöÄ –°—Ç–∞—Ä—Ç$"), handle_start_button))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_landmark_choice))
    app.add_handler(MessageHandler(filters.ALL, handle_unknown_text))  # fallback

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
